<?php

namespace Izzy\RealApplications;

use Izzy\AbstractApplications\WebApplication;
use Izzy\Traits\SingletonTrait;
use Izzy\Web\Middleware\AuthMiddleware;
use Izzy\Web\Viewers\AuthPage;
use Izzy\Web\Viewers\DashboardViewer;
use Izzy\Web\Viewers\PageViewer;
use Izzy\Web\Viewers\TradedPairsViewer;
use Izzy\Web\Viewers\WatchedPairsViewer;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;

final class IzzyWeb extends WebApplication {
	use SingletonTrait;

	public function __construct() {
		parent::__construct();
		$this->slimApp->get('/', [$this, 'indexPage'])->add(AuthMiddleware::class);
		$this->slimApp->get('/pairs.jsp', [$this, 'pairsPage'])->add(AuthMiddleware::class);
		$this->slimApp->get('/watched.jsp', [$this, 'watchedPage'])->add(AuthMiddleware::class);
		$this->slimApp->get('/charts/{filename:.+\.png}', [$this, 'serveChartFile'])->add(AuthMiddleware::class);
		$this->slimApp->get('/balance-chart/{range}', [$this, 'generateBalanceChart'])->add(AuthMiddleware::class);
		$this->slimApp->get('/login.jsp', [$this, 'authPage']);
		$this->slimApp->post('/login.jsp', [$this, 'authHandler']);
		$this->slimApp->get('/logout.jsp', [$this, 'logoutPage']);
	}

	public function indexPage(Request $request, Response $response): Response {
		$pageViewer = new DashboardViewer($this);
		return $pageViewer->render($response);
	}

	public function authPage(Request $request, Response $response): Response {
		$pageViewer = new AuthPage($this);
		return $pageViewer->render($response);
	}

	public function logoutPage(Request $request, Response $response): Response {
		$_SESSION = [];
		session_destroy();
		return $response->withHeader('Location', '/login.jsp')->withStatus(302);
	}

	public function pairsPage(Request $request, Response $response): Response {
		$pageViewer = new TradedPairsViewer($this);
		return $pageViewer->render($response);
	}

	public function watchedPage(Request $request, Response $response): Response {
		$pageViewer = new WatchedPairsViewer($this);
		return $pageViewer->render($response);
	}

	public function generateBalanceChart(Request $request, Response $response, array $args): Response {
		$range = $args['range'];
		$validRanges = ['day', 'month', 'year'];

		if (!in_array($range, $validRanges)) {
			$response->getBody()->write('');
			return $response->withHeader('Content-Type', 'image/png');
		}

		$chartFilename = IZZY_CHARTS."/balance_{$range}.png";

		try {
			// Check if chart file exists (generated by Analyzer)
			if (!file_exists($chartFilename)) {
				// Return empty image while chart is being generated
				$response->getBody()->write('');
				return $response->withHeader('Content-Type', 'image/png');
			}

			// Read file contents
			$imageData = file_get_contents($chartFilename);
			if ($imageData === false) {
				throw new \Exception("Failed to read balance chart file: $chartFilename");
			}

			$response->getBody()->write($imageData);
			return $response->withHeader('Content-Type', 'image/png');
		} catch (\Exception $e) {
			// In case of error, return empty image or placeholder
			$response->getBody()->write('');
			return $response->withHeader('Content-Type', 'image/png');
		}
	}

	public function serveChartFile(Request $request, Response $response, array $args): Response {
		$filename = $args['filename'];
		$fullPath = IZZY_CHARTS.'/'.$filename;
		if (!preg_match('/^[A-Za-z0-9_]+\.png$/', $filename) || !file_exists($fullPath)) {
			$response->getBody()->write('');
			return $response->withHeader('Content-Type', 'image/png');
		}
		$imageData = file_get_contents($fullPath);
		$response->getBody()->write($imageData);
		return $response->withHeader('Content-Type', 'image/png');
	}

	public function authHandler(Request $request, Response $response): Response {
		$parsed = $request->getParsedBody();
		$password = $parsed['password'] ?? '';

		// Get password from configuration
		$configPassword = $this->configuration->getWebPassword();

		if ($password === $configPassword) {
			$_SESSION['authorized'] = true;
			return $response->withHeader('Location', '/')->withStatus(302);
		}

		return $response->withHeader('Location', '/login.jsp')->withStatus(302);
	}
}
